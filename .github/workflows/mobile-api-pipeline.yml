name: ðŸ“± Mobile API CI/CD - Omarovic42 v2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
        
    - name: Install dependencies
      run: |
        cd api
        npm ci
        
    - name: Run tests with proper permissions
      run: |
        cd api
        chmod +x node_modules/.bin/jest
        npm run test:ci
      env:
        NODE_ENV: test

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        push: true
        tags: |
          ghcr.io/omarovic42/mobile-api:latest
          ghcr.io/omarovic42/mobile-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add staging host to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H 35.233.124.20 >> ~/.ssh/known_hosts
        
    - name: Setup Python and Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip docker-compose
        python3 -m pip install --upgrade pip
        python3 -m pip install ansible==8.7.0 ansible-core==2.15.13
        ansible-galaxy collection install community.docker:3.4.0 --force
        
    - name: Test SSH connection and permissions
      run: |
        ssh -o ConnectTimeout=10 chelsea42_om@35.233.124.20 'echo "SSH connection successful to staging"'
        ssh -o ConnectTimeout=10 chelsea42_om@35.233.124.20 'id && echo "Current user permissions:" && groups'
        ssh -o ConnectTimeout=10 chelsea42_om@35.233.124.20 'echo "Home directory:" && ls -la ~/'
        
    - name: Deploy to Staging via SSH
      run: |
        # Create deploy script
        cat > deploy.sh <<'EOF'
        #!/bin/bash
        set -e

        # Variables
        IMAGE="ghcr.io/omarovic42/mobile-api:${{ github.sha }}"
        TARGET_DIR="$HOME/mobile-api"

        # Create directory if needed
        mkdir -p $TARGET_DIR

        # Create docker-compose file
        cat > $TARGET_DIR/docker-compose.yml <<EOL
        version: '3'

        services:
          api:
            image: ${IMAGE}
            restart: always
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=production
              - PORT=3000
            volumes:
              - api_data:/app/data

        volumes:
          api_data:
        EOL

        # Pull and start containers
        cd $TARGET_DIR
        docker-compose pull
        docker-compose up -d
        
        # Verify container is running
        echo "Containers running:"
        docker ps
        EOF

        # Make script executable and copy to server
        chmod +x deploy.sh
        scp -o StrictHostKeyChecking=no deploy.sh chelsea42_om@35.233.124.20:~/deploy.sh
        
        # Execute script on server
        ssh -o StrictHostKeyChecking=no chelsea42_om@35.233.124.20 'bash ~/deploy.sh'

  deploy-production:
    needs: [test, build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add production host to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H 34.38.164.180 >> ~/.ssh/known_hosts
        
    - name: Test SSH connection to production
      run: |
        ssh -o ConnectTimeout=10 chelsea42_om@34.38.164.180 'echo "SSH connection successful to production"'
        ssh -o ConnectTimeout=10 chelsea42_om@34.38.164.180 'id && echo "Current user permissions:" && groups'
        ssh -o ConnectTimeout=10 chelsea42_om@34.38.164.180 'echo "Home directory:" && ls -la ~/'
        
    - name: Deploy to Production via SSH
      run: |
        # Create deploy script
        cat > deploy.sh <<'EOF'
        #!/bin/bash
        set -e

        # Variables
        IMAGE="ghcr.io/omarovic42/mobile-api:${{ github.sha }}"
        TARGET_DIR="$HOME/mobile-api"

        # Create directory if needed
        mkdir -p $TARGET_DIR

        # Create docker-compose file
        cat > $TARGET_DIR/docker-compose.yml <<EOL
        version: '3'

        services:
          api:
            image: ${IMAGE}
            restart: always
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=production
              - PORT=3000
            volumes:
              - api_data:/app/data

        volumes:
          api_data:
        EOL

        # Pull and start containers
        cd $TARGET_DIR
        docker-compose pull
        docker-compose up -d
        
        # Verify container is running
        echo "Containers running:"
        docker ps
        EOF

        # Make script executable and copy to server
        chmod +x deploy.sh
        scp -o StrictHostKeyChecking=no deploy.sh chelsea42_om@34.38.164.180:~/deploy.sh
        
        # Execute script on server
        ssh -o StrictHostKeyChecking=no chelsea42_om@34.38.164.180 'bash ~/deploy.sh'