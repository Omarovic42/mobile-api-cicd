name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
      
      - name: Install dependencies
        run: |
          cd api
          npm ci
      
      - name: Run ESLint
        run: |
          cd api
          npm run lint || true

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
      
      - name: Install dependencies
        run: |
          cd api
          npm ci
      
      - name: Run tests
        run: |
          cd api
          npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID }}"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      
      - name: Setup Ansible
        run: |
          pip install ansible
          ansible-galaxy collection install community.docker
      
      - name: Deploy to Staging
        run: |
          cd ansible
          ansible-playbook -i inventory/hosts.yml playbooks/deploy.yml -l staging
        env:
          API_VERSION: ${{ github.sha }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Create Snapshot
        run: |
          echo "Creating snapshot before deployment..."
          # Script de snapshot ici
      
      - name: Setup Ansible
        run: |
          pip install ansible
          ansible-galaxy collection install community.docker
      
      - name: Deploy to Production
        run: |
          cd ansible
          ansible-playbook -i inventory/hosts.yml playbooks/deploy.yml -l production
        env:
          API_VERSION: ${{ github.sha }}
      
      - name: Health Check
        run: |
          sleep 30
          curl -f http://PRODUCTION_IP/health || exit 1

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    steps:
      - name: Rollback Production
        run: |
          echo "Rolling back to previous version..."
          # Script de rollback ici
